classdef app4 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                    matlab.ui.Figure
        TabGroup                    matlab.ui.container.TabGroup
        Tab1                        matlab.ui.container.Tab
        StatusLighting              matlab.ui.control.Label
        LightingSystemLabel         matlab.ui.control.Label
        WaterTemperatureGreenhouse  matlab.ui.control.Label
        StatusIrrigation            matlab.ui.control.Label
        IrrigationSystemLabel       matlab.ui.control.Label
        StatusHeating               matlab.ui.control.Label
        TemperatureGreenhouse       matlab.ui.control.Label
        HeatingSystemLabel          matlab.ui.control.Label
        AirQualityGreenhouse        matlab.ui.control.Label
        HumidityGreenhouse          matlab.ui.control.Label
        StatusVentilation           matlab.ui.control.Label
        VentilationSystemLabel      matlab.ui.control.Label
        SystemTimeandDateLabel      matlab.ui.control.Label
        CityDropDown                matlab.ui.control.DropDown
        CityDropDownLabel           matlab.ui.control.Label
        TemperatureBox              matlab.ui.control.Label
        HumidityBox                 matlab.ui.control.Label
        WeatherBox                  matlab.ui.control.Label
        WeatherHeading              matlab.ui.control.Label
        lblTIME                     matlab.ui.control.Label
        lblDATE                     matlab.ui.control.Label
        Tab2                        matlab.ui.container.Tab
        GreenhouseViewLabel         matlab.ui.control.Label
    end

    
   properties (Access = private)
        Timer % Timer object
    end

    methods (Access = private)
        % Code to execute when the app is deleted
        function appdelete(app)
            % Stop and delete a timer if it exists
            if isfield(app, 'Timer') && isvalid(app.Timer)
                stop(app.Timer);
                delete(app.Timer);
            end
        end

        % Update date and time
        function updateDateTime(app)
            % Get current date and time
            currentDate = datestr(now, 'dddd, mmmm dd, yyyy'); % Example: "Monday, November 24, 2024"
            currentTime = datestr(now, 'HH:MM:SS PM');         % Example: "03:45:12 PM"

            % Update the labels
            app.lblDATE.Text = ['Date: ', currentDate];
            app.lblTIME.Text = ['Time: ', currentTime];
        end

        % Fetch weather data
        function [weatherCondition, humidity, temperature] = getWeatherData(app, city)
            % Your OpenWeatherMap API key
            apiKey = 'db8f06d2060111bfa12573556286b163';

            % OpenWeatherMap API endpoint
            baseUrl = 'http://api.openweathermap.org/data/2.5/weather';

            % Construct the full API URL
            url = sprintf('%s?q=%s&units=metric&appid=%s', baseUrl, city, apiKey);

            try
                % Fetch the weather data
                response = webread(url);

                % Extract details
                weatherCondition = response.weather(1).description; % e.g., 'clear sky'
                humidity = response.main.humidity; % e.g., 60
                temperature = response.main.temp; % e.g., 22.5
            catch
                % Return empty values in case of an error
                weatherCondition = 'N/A';
                humidity = 'N/A';
                temperature = 'N/A';
            end
        end
    end
    
    


    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
           % Update the date and time immediately
            updateDateTime(app);

            % Clear the weather boxes
            app.WeatherBox.Text = 'Weather: ';
            app.HumidityBox.Text = 'Humidity: ';
            app.TemperatureBox.Text = 'Temperature: ';

            % Set up a timer to update every second
            app.Timer = timer('ExecutionMode', 'fixedRate', ...
                              'Period', 1, ...
                              'TimerFcn', @(~,~) updateDateTime(app));
            start(app.Timer);
        
        
        end

        % Value changed function: CityDropDown
        function CityDropDownValueChanged(app, event)
           % Get the selected city
    selectedCity = app.CityDropDown.Value;

    % Check if a city is selected
    if strcmp(selectedCity, 'Select a city')
        % Clear the boxes if no city is selected
        app.WeatherBox.Text = 'Weather: ';
        app.HumidityBox.Text = 'Humidity: ';
        app.TemperatureBox.Text = 'Temperature: ';
    else
        try
            % Fetch weather data for the selected city
            [weather, humidity, temperature] = app.getWeatherData(selectedCity);

            % Update the boxes with weather details
            app.WeatherBox.Text = ['Weather: ', weather];
            app.HumidityBox.Text = ['Humidity: ', num2str(humidity), '%'];
            app.TemperatureBox.Text = ['Temperature: ', num2str(temperature), 'Â°C'];
        catch
            % Display an error message in case of failure
            app.WeatherBox.Text = 'Weather: Error fetching data';
            app.HumidityBox.Text = 'Humidity: N/A';
            app.TemperatureBox.Text = 'Temperature: N/A';
        end
    end
    
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 608 320];
            app.UIFigure.Name = 'MATLAB App';

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigure);
            app.TabGroup.Position = [2 1 634 320];

            % Create Tab1
            app.Tab1 = uitab(app.TabGroup);
            app.Tab1.Title = 'Tab';

            % Create lblDATE
            app.lblDATE = uilabel(app.Tab1);
            app.lblDATE.Position = [5 204 215 34];
            app.lblDATE.Text = 'Date:';

            % Create lblTIME
            app.lblTIME = uilabel(app.Tab1);
            app.lblTIME.Position = [5 237 206 25];
            app.lblTIME.Text = 'Time:';

            % Create WeatherHeading
            app.WeatherHeading = uilabel(app.Tab1);
            app.WeatherHeading.Position = [223 234 147 25];
            app.WeatherHeading.Text = 'Weather Information';

            % Create WeatherBox
            app.WeatherBox = uilabel(app.Tab1);
            app.WeatherBox.Position = [226 201 146 22];
            app.WeatherBox.Text = 'Weather:';

            % Create HumidityBox
            app.HumidityBox = uilabel(app.Tab1);
            app.HumidityBox.Position = [226 180 146 22];
            app.HumidityBox.Text = 'Humidity:';

            % Create TemperatureBox
            app.TemperatureBox = uilabel(app.Tab1);
            app.TemperatureBox.Position = [224 159 146 22];
            app.TemperatureBox.Text = 'Temperature:';

            % Create CityDropDownLabel
            app.CityDropDownLabel = uilabel(app.Tab1);
            app.CityDropDownLabel.HorizontalAlignment = 'right';
            app.CityDropDownLabel.Position = [219 264 26 22];
            app.CityDropDownLabel.Text = 'City';

            % Create CityDropDown
            app.CityDropDown = uidropdown(app.Tab1);
            app.CityDropDown.Items = {' ', 'Kayseri', 'Tokyo', 'Paris', 'Sakarya', 'Konya', 'Bursa'};
            app.CityDropDown.ValueChangedFcn = createCallbackFcn(app, @CityDropDownValueChanged, true);
            app.CityDropDown.Position = [267 264 92 22];
            app.CityDropDown.Value = ' ';

            % Create SystemTimeandDateLabel
            app.SystemTimeandDateLabel = uilabel(app.Tab1);
            app.SystemTimeandDateLabel.Position = [5 267 206 22];
            app.SystemTimeandDateLabel.Text = 'System Time and Date';

            % Create VentilationSystemLabel
            app.VentilationSystemLabel = uilabel(app.Tab1);
            app.VentilationSystemLabel.Position = [441 264 131 22];
            app.VentilationSystemLabel.Text = 'Ventilation System';

            % Create StatusVentilation
            app.StatusVentilation = uilabel(app.Tab1);
            app.StatusVentilation.Position = [441 233 131 22];
            app.StatusVentilation.Text = 'Status:';

            % Create HumidityGreenhouse
            app.HumidityGreenhouse = uilabel(app.Tab1);
            app.HumidityGreenhouse.Position = [441 212 131 22];
            app.HumidityGreenhouse.Text = 'Humidity:';

            % Create AirQualityGreenhouse
            app.AirQualityGreenhouse = uilabel(app.Tab1);
            app.AirQualityGreenhouse.Position = [441 191 131 22];
            app.AirQualityGreenhouse.Text = 'Air Quality:';

            % Create HeatingSystemLabel
            app.HeatingSystemLabel = uilabel(app.Tab1);
            app.HeatingSystemLabel.Position = [3 91 118 22];
            app.HeatingSystemLabel.Text = 'Heating System';

            % Create TemperatureGreenhouse
            app.TemperatureGreenhouse = uilabel(app.Tab1);
            app.TemperatureGreenhouse.Position = [3 37 118 22];
            app.TemperatureGreenhouse.Text = 'Temperature:';

            % Create StatusHeating
            app.StatusHeating = uilabel(app.Tab1);
            app.StatusHeating.Position = [3 58 118 22];
            app.StatusHeating.Text = 'Status:';

            % Create IrrigationSystemLabel
            app.IrrigationSystemLabel = uilabel(app.Tab1);
            app.IrrigationSystemLabel.Position = [224 91 146 22];
            app.IrrigationSystemLabel.Text = 'Irrigation System';

            % Create StatusIrrigation
            app.StatusIrrigation = uilabel(app.Tab1);
            app.StatusIrrigation.Position = [224 58 146 22];
            app.StatusIrrigation.Text = 'Status:';

            % Create WaterTemperatureGreenhouse
            app.WaterTemperatureGreenhouse = uilabel(app.Tab1);
            app.WaterTemperatureGreenhouse.Position = [224 37 146 22];
            app.WaterTemperatureGreenhouse.Text = 'Water Temperature:';

            % Create LightingSystemLabel
            app.LightingSystemLabel = uilabel(app.Tab1);
            app.LightingSystemLabel.Position = [441 91 90 22];
            app.LightingSystemLabel.Text = 'Lighting System';

            % Create StatusLighting
            app.StatusLighting = uilabel(app.Tab1);
            app.StatusLighting.Position = [441 58 90 22];
            app.StatusLighting.Text = 'Status:';

            % Create Tab2
            app.Tab2 = uitab(app.TabGroup);
            app.Tab2.Title = 'Tab2';

            % Create GreenhouseViewLabel
            app.GreenhouseViewLabel = uilabel(app.Tab2);
            app.GreenhouseViewLabel.Position = [11 264 110 22];
            app.GreenhouseViewLabel.Text = 'Greenhouse  View: ';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = app4

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
