/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);

/* USER CODE BEGIN 0 */
/* Motor kontrol fonksiyonu */
void Motor_Control(GPIO_TypeDef *GPIOx, uint16_t Pin1, uint16_t Pin2, TIM_HandleTypeDef *htim, uint32_t Channel, GPIO_PinState Dir1, GPIO_PinState Dir2, uint16_t Duty)
{
    HAL_GPIO_WritePin(GPIOx, Pin1, Dir1);
    HAL_GPIO_WritePin(GPIOx, Pin2, Dir2);
    __HAL_TIM_SET_COMPARE(htim, Channel, Duty); // PWM Duty Cycle ayarı
}
/* USER CODE END 0 */

int main(void)
{
    /* MCU Configuration--------------------------------------------------------*/
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_TIM2_Init();

    /* PWM Başlatma */
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Motor 1 için PWM başlat
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // Motor 2 için PWM başlat

    while (1)
    {
        /* Motorları ileri çalıştır */
        Motor_Control(GPIOB, GPIO_PIN_0, GPIO_PIN_1, &htim2, TIM_CHANNEL_2, GPIO_PIN_SET, GPIO_PIN_RESET, 800); // Motor 1 ileri
        Motor_Control(GPIOB, GPIO_PIN_3, GPIO_PIN_4, &htim2, TIM_CHANNEL_3, GPIO_PIN_SET, GPIO_PIN_RESET, 800); // Motor 2 ileri
        HAL_Delay(10000); // 10 saniye ileri çalış

        /* Motorları durdur */
        Motor_Control(GPIOB, GPIO_PIN_0, GPIO_PIN_1, &htim2, TIM_CHANNEL_2, GPIO_PIN_RESET, GPIO_PIN_RESET, 0); // Motor 1 durdur
        Motor_Control(GPIOB, GPIO_PIN_3, GPIO_PIN_4, &htim2, TIM_CHANNEL_3, GPIO_PIN_RESET, GPIO_PIN_RESET, 0); // Motor 2 durdur
        HAL_Delay(3000); // 3 saniye bekle

        /* Motorları geri çalıştır */
        Motor_Control(GPIOB, GPIO_PIN_0, GPIO_PIN_1, &htim2, TIM_CHANNEL_2, GPIO_PIN_RESET, GPIO_PIN_SET, 800); // Motor 1 geri
        Motor_Control(GPIOB, GPIO_PIN_3, GPIO_PIN_4, &htim2, TIM_CHANNEL_3, GPIO_PIN_RESET, GPIO_PIN_SET, 800); // Motor 2 geri
        HAL_Delay(10000); // 10 saniye geri çalış

        /* Motorları durdur */
        Motor_Control(GPIOB, GPIO_PIN_0, GPIO_PIN_1, &htim2, TIM_CHANNEL_2, GPIO_PIN_RESET, GPIO_PIN_RESET, 0); // Motor 1 durdur
        Motor_Control(GPIOB, GPIO_PIN_3, GPIO_PIN_4, &htim2, TIM_CHANNEL_3, GPIO_PIN_RESET, GPIO_PIN_RESET, 0); // Motor 2 durdur
        HAL_Delay(3000); // 3 saniye bekle
    }
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    __HAL_RCC_PWR_CLK_ENABLE();
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLM = 25;
    RCC_OscInitStruct.PLL.PLLN = 336;
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
    RCC_OscInitStruct.PLL.PLLQ = 4;

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}


/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};
    TIM_OC_InitTypeDef sConfigOC = {0};

    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 84 - 1;         // Prescaler: 1 MHz
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 1000 - 1;          // 1 kHz PWM frekansı
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
    {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
    {
        Error_Handler();
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
    {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    {
        Error_Handler();
    }

    /* Channel 2: Motor 1 */
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
    sConfigOC.Pulse = 0;
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
    {
        Error_Handler();
    }

    /* Channel 3: Motor 2 */
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
    {
        Error_Handler();
    }

    HAL_TIM_MspPostInit(&htim2);
}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();

    /* GPIO pinlerini sıfırla */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4, GPIO_PIN_RESET);

    /* Motor 1 için PB0, PB1 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* Motor 2 için PB3, PB4 */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
}

/**
  * @brief  Hata Durumu
  * @retval None
  */
void Error_Handler(void)
{
    while (1)
    {
    }
}



